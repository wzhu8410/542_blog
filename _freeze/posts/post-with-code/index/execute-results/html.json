{
  "hash": "794ed411061e9afe94a43ed9848b99c8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"From Data to Model: Building an End-to-End Pipeline in Python\"\nauthor: \"Wangkai Zhu\"\ndate: \"2025-01-18\"\ncategories: [tutorial, code, analysis]\nimage: \"image.jpg\"\nexecute:\n  eval: false\n---\n\n\n# Introduction\n\nPipeline is one of the most important concepts in machine learning with profound practical use. It organizes the machine learning workflow of an entire process of taking raw data, processing it, and building a model that is based off given data to be implemented on countless others. The pipeline includes more than just a model, rather, it is a Blackbox that contains all the tricks and whistles to perform a machine learning process in its entirety. If you feed raw dough into this pipeline, it would perform the necessary work to build a delicious bread from the other end.  \n\n![Beautiful Bread Coming Out of Oven](oven.jpg)\n\n# Warm up to building a pipeline\n\n## A pipeline is typically consisted of the following steps:\n1.\t**Data Loading**  \nThe first step to load the raw data into the pipeline. Raw data can be consisted of various formats (e.g. .csv, .xlsx) and from various sources (e.g. API, local).\nEfficient data handling is essential to get started on building a pipeline.  \n2.\t**Data Preprocessing**  \nRaw data is often messy with repeated values, missing values, and/or invalid values. This step is crucial to clean the data as desired before feeding it to the pipeline. Preprocessing also includes basic exploratory data analysis (EDA) to understand the dataset’s structure and patterns. \n3.\t**Feature Engineering**  \nThis steps help filter out the features that are used in the upcoming model. Features can be manipulated by many ways. We often see this step being performed with encoding, combining, and with expert knowledge.  \n4.\t**Model Training**  \nNow it gets to the fun part. Based on the data and questions asked, we choose an appropriate machine learning algorithm and train the model. It is crucial to split the data into training and validation sets and tune the hyperparameters to optimize model.  \n5.\t**Evaluation**  \nAfter training the model, we evaluate the model’s performance using multiple metrics such as accuracy, f1 score, or precision/recall. After we have a satisfied model we are ready to deploy it to unseen data.  \n\n## Tools for Building ML Pipelines \n\n1. **Data Loading**: pandas, NumPy.\n2. **Data Preprocessing**: scikit-learn, pandas, matplotlib.\n3. **Feature Engineering**: scikit-learn.\n4. **Model Training**: scikit-learn, XGBoost, PyTorch.\n5. **Evaluation**: scikit-learn, seaborn, FastAPI, Docker.\n\nThese python packages often come in handy for each of the steps within the pipeline. Specifically, scikit-learn is a machine learning packages that will get you started straightforward with models and preprocessing encoders. Matplotlib and seaborn are a few plotting packages that is useful to perform EDA to understand the basic data structure and to evaluate the model performance after training. \n\nAfter getting an understanding of the structure of a pipeline, we can see that a completed pipeline would be able to take in a raw dataset, clean it to be training-ready, and train the model based on the data. The model we obtained from this pipeline can make classification or regression predictions on future unseen data. \n\n# Step-by-Step Guide to Build a Machine Learning Pipeline \n\n## Step 1: Data Loading\n\nStart by loading your dataset. For this example, we’ll use a CSV file:\n\n::: {#0d81d00d .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\nprint(data.head())\n```\n:::\n\n\n## Step 2: Data Preprocessing\n\nHandle missing values, outliers, and normalize the data.\n\n::: {#7b0fe803 .cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\n\n# Fill missing values\ndata.fillna(data.mean(), inplace=True)\n\n# Split data into train and test sets\ntrain_data, test_data = train_test_split(data, test_size=0.2, random_state=42)\n```\n:::\n\n\n## Step 3: Feature Engineering\n\nTransform categorical variables and scale numerical features.\n\n::: {#bfb260ad .cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\n\n# Define categorical and numerical features\ncategorical_features = ['category_column']\nnumerical_features = ['numeric_column']\n\n# Create transformers\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(), numerical_features),\n        ('cat', OneHotEncoder(), categorical_features)\n    ])\n\n# Apply preprocessing\nX_train = preprocessor.fit_transform(train_data)\nX_test = preprocessor.transform(test_data)\n```\n:::\n\n\n## Step 4: Model Training\n\nChoose a model and train it on the preprocessed data.\n\n::: {#316eb6a8 .cell execution_count=4}\n``` {.python .cell-code}\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Define the model\nmodel = RandomForestClassifier(random_state=42)\n\n# Train the model\nmodel.fit(X_train, train_data['target_column'])\n```\n:::\n\n\n## Step 5: Evaluation\n\nEvaluate the model’s performance using appropriate metrics.\n\n::: {#0088f3a0 .cell execution_count=5}\n``` {.python .cell-code}\nfrom sklearn.metrics import accuracy_score, classification_report\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nprint(accuracy_score(test_data['target_column'], y_pred))\nprint(classification_report(test_data['target_column'], y_pred))\n```\n:::\n\n\n# Use case and application\n\n## Real World Scenarios  \n\nML pipelines are especially useful in scenarios where consistency, scalability and automation are crucial. It is a reproducible modeling schema that could be beneficial in numerous fields, finance, winery, and medicine to name a few. In finance, banks can use a trained model to predict whether a given customer can be approved a loan given his personal information. In healthcare, models can be used to predict disease progression based on patient records, etc. \n\n# imitations\n\nHowever, aside from the advantages of a pipeline there also comes limitations. For example, pipelines can struggle when the input data changes drastically, requiring constant monitoring and updates. Over automation may also add unnecessary complexity for simple objects, increasing cost and efficiency for industries. \n\n## Conclusion\n\nBy following this guide, you gained a comprehensive understanding of how to:  \n1. Design and implement an end-to-end machine learning pipeline.  \n2. Optimize workflows for scalability and efficiency.  \n3. Deploy models effectively for real-world applications.  \n\nBuilding ML pipelines can get very simple and very difficult at the same time. It is a process that requires patience and practice. With each project, you will refine your skills and tackle more problems to make meaningful impact. Whether you are trying to build your first pipeline or catching up on the exam tomorrow, thank you for going through my blog and hope your pipelines always run smoothly!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}